//如何避免野指针
//1.指针初始化
//2.小心指针越界
//3.指针指向的空间释放 将指针置为空
//4.指针使用之前检查有效性
#include <stdio.h>

int main()
{
    int a=10;
    int* pa=&a;
    *pa=20;
    int** ppa=&pa;//ppa就是二级指针
    
    pa=NULL;
    
    if (pa!=NULL) {
        <#statements#>
    }
    return 0;
}

//指针数组-数组-存放指针的数组
//数组指针-指针

int main()
{
    int a=10;
    int b=20;
    int c=30;
    int* arr2[3]={&a,&b,&c};//指针数组
    int i=0;
    for (i=0; i<3; i++) {
        printf("%d", *(arr2[i]));
    }
    return 0;
}

----------------------------------------

#include <stdio.h>
#include <assert.h>

void my_strcpy(char* dest, const char* src)
//const放在指针变量的*左边时，修饰的是*p，就是说：不能通过指针p来改变*p的值，但可改变指针p指向的地址
//const放在指针变量的右边，修饰的是指针变量p本身，指针p不能被改变（地址不能变），*p可变
{
    //断言：判断为真，什么都不发生；判断为假，报告错误发生地
    assert(dest !=NULL);//断言
    assert(src !=NULL);//断言
    
    while (*dest++=*src++) {
        ;
    }
}
int main()
{
    //strcpy
    //字符串拷贝
    char arr1[]="#########";
    char arr2[]="bit";
    my_strcpy(arr1, arr2);
    printf("%s\n",arr1);
    return 0;
}
