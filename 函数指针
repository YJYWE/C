//函数指针
//qsort-库函数-排序

//void qsort(<#void *base#>, <#int num#>, <#int width#>, <#int (*compare)(const void *, const void *)#>)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Stu
{
    char name[20];
    int age;
};

int cmp_int(const void* e1, const void* e2)
{
    //比较两个整型值
    return *(int*)e1-*(int*)e2;
}

int cmp_float(const void* e1, const void* e2)
{
    if(*(float*)e1==*(float*)e2)
        return 0;
    else if (*(float*)e1>*(float*)e2)
        return 1;
    else
        return -1;
    //return ((int)(*(float*)e1==*(float*)e2));
}

int cmp_stu_by_age(const void* e1, const void* e2)
{
    return ((struct Stu*)e1)->age-((struct Stu*)e2)->age;
}

int cmp_stu_by_name(const void* e1, const void* e2)
{
    return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
}
void test1()
{
    int arr[10]={9,8,7,6,5,4,3,2,1,0};
    int sz=sizeof(arr)/sizeof(arr[0]);
    qsort(arr, sz, sizeof(arr[0]), cmp_int);
    int i=0;
    for (i=0; i<sz; i++) {
        printf("%d ",arr[i]);
    }
    printf("\n");
}

void test2()
{
    float f[]={9.0,8.0,7.0,6.0,5.0,4.0};
    int sz=sizeof(f)/sizeof(f[0]);
    qsort(f, sz, sizeof(f[0]), cmp_float);
    int j=0;
    for (j=0; j<sz; j++) {
        printf("%f ",f[j]);
    }
    printf("\n");
}

void test3()
{
    struct Stu s[3]={{"zhangsan",20},{"list",30},{"wangwu",10}};
    int sz=sizeof(s)/sizeof(s[0]);
    qsort(s, sz, sizeof(s[0]), cmp_stu_by_age);
    for (int i=0; i<sz; i++) {
        printf("%s,%d ",s[i].name,s[i].age);
    }
    printf("\n");
}

void test4()
{
    struct Stu s[3]={{"zhangsan",20},{"list",30},{"wangwu",10}};
    int sz=sizeof(s)/sizeof(s[0]);
    qsort(s, sz, sizeof(s[0]), cmp_stu_by_name);
    for (int i=0; i<sz; i++) {
        printf("%s,%d ",s[i].name,s[i].age);
    }
    printf("\n");
}

int main()
{
    test1();
    test2();
    test3();
    test4();
}

-----------------------------------------------

//函数指针数组
//函数：int Add(int x,int y)
//函数指针数组：int (*prArr[])(int, int)
//函数指针数组用途：转移表

#include <stdio.h>

void menu()
{
    printf("**************************\n");
    printf("**1.Sub            2.Sub**\n");
    printf("**3.Mul            4.Div**\n");
    printf("**        0.退出         **\n");
    printf("**************************\n");
}

int Add(int x,int y)
{
    return x+y;
}

int Sub(int x,int y)
{
    return x-y;
}

int Mul(int x,int y)
{
    return x*y;
}

int Div(int x,int y)
{
    return x/y;
}

int main()
{
    int input=0;
    int x=0;
    int y=0;
    int (*pfArr[5])(int,int)={0,Add,Sub,Mul,Div};
    do
    {
        menu();
        printf("请选择：>");
        scanf("%d",&input);
        if (input>=1&&input<=4) {
            printf("请输入两个操作数：>");
            scanf("%d%d",&x,&y);
            int ret=pfArr[input](x,y);
            printf("%d\n",ret);
        }
        else if (input==0)
        {
            printf("退出\n");
        }
        else
        {
            printf("选择错误\n");
        }
        
    }while(input);
}

---------------------------------------------------------
//回调函数

#include <stdio.h>

void menu()
{
    printf("**************************\n");
    printf("**1.Sub            2.Sub**\n");
    printf("**3.Mul            4.Div**\n");
    printf("**        0.退出         **\n");
    printf("**************************\n");
}

int Add(int x,int y)
{
    return x+y;
}

int Sub(int x,int y)
{
    return x-y;
}

int Mul(int x,int y)
{
    return x*y;
}

int Div(int x,int y)
{
    return x/y;
}

void Calc(int(*pr)(int, int))
{
    int x=0;
    int y=0;
    printf("请输入两个操作数：>");
    scanf("%d%d",&x,&y);
    printf("%d\n",pr(x,y));
}
int main()
{
    int input=0;
    
    do
    {
        menu();
        printf("请选择：>");
        scanf("%d",&input);
        switch (input) {
            case 1:
                Calc(Add);
                break;
            case 2:
                Calc(Sub);
                break;
            case 3:
                Calc(Mul);
                break;
            case 4:
                Calc(Div);
                break;
            case 0:
                printf("退出\n");
                break;
            default:
                printf("输入错误\n");
                break;
        }
        
    }while(input);
}

-------------------------------------------

//指向[函数指针数组]的指针

int Add(int x,int y)
{
    return x+y;
}
int main()
{
    int arr[10]={0};
    int (*p)[10]=&arr;//取出数组的地址
    
    int (*pfArr[4])(int,int);//pfArr是一个数组-函数指针的数组
    int (*(*ppfArr)[4])(int,int)=&pfArr;
    //ppfArr 是一个数组指针，指针指向的数组有4个元素
    //指向的数组的每个元素的类型是一个函数指针 int(*)(int, int)
}
